<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 DO NOT HAND EDIT THE XSLT.  IT IS A GENERATED FILE.  See (*) below

 Title:        XSLT to convert a DDI 2 Codebook to HTML.
 Author:       Minnesota Population Center, University of Minnesota
 Attribution:  Derived from work by the University of Michigan 
 License:      This work is licensed under a Creative Commons Attribution-
               Noncommercial 3.0 United States License.  This is also the
               license of the University of Michigan work from which this
               work was derived.  For more information on the license terms, 
               please see: http://creativecommons.org/licenses/by-nc/3.0/us/
               
 PURPOSE
   This XML stylesheet is intended to serve as a generic stylesheet for HTML 
   display of codebooks marked up according to Version 2.1 of the DDI DTD. 
   
* PLEASE NOTE
   One major change from the University of Michigan's version is that this
   DDI stylesheet is generated by Ruby.  Therefore it should not be hand edited, 
   as any changes made to the XSLT will be blown away the next time the XSLT
   is regenerated.  Instead, please edit "ipums_ddi_xslt.rb".   
   
 MINIMUM CONTENT
   A title is expected to be found via xpath stdyDscr/citation/titlStmt/titl.
   
 REVISION NOTES: 
     In December 2010, the Minnesota Population Center branched the University 
     of Michigan's DDI XSLT, for the purpose of adapting it to the IPUMS family
     of projects. Changes include:
     
       - Adjustments for the adapted XSLT's primary use case:
         offline viewing of a downloaded DDI codebook, where the codebook
         describes an IPUMS extract.
     
       - Usage of CSS increased, reflecting the substantial growth in CSS's
         capabilities since 2005. (2005 appears to be the date of the last
         revision to this XSLT.)
 -->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xyzzy="http://www.icpsr.umich.edu/DDI" exclude-result-prefixes="xyzzy">
  <xsl:output method="html" version="4.01" indent="yes" encoding="utf-8" doctype-public="-//W3C//DTD HTML 4.01//EN" doctype-system="http://www.w3.org/TR/html4/strict.dtd"/>
  <xsl:template match="codeBooks">
    <html>
      <head>
        <title>
          <xsl:value-of select="xyzzy:stdyDscr/xyzzy:citation/xyzzy:titlStmt/xyzzy:titl | stdyDscr/citation/titlStmt/titl"/>
        </title>
        <style type="text/css">
          <xsl:text>

body {
  font-family: Verdana, Helvetica, Arial, sans-serif;
    font-size: 12px;
    padding: 5px;
}
table{
	width: 98%;
	border-width: 1px;
}

* {
  font-size: 1em;
}

.nav_section {
  padding: 1em;
}

.nav_label {
  font-weight: bold;
  margin: 1em;
  font-size: 1.2em;
}

li {
  margin: 0.5em;
  padding: 0em;
  font-size: 1.2em;
}

.heading {
  background: #657383;
}

h1 {
  font-size: 24px;
  text-align: left;
}

h2 {
  margin:  1em;
  font-size:  1.6em;
}

h3 {
  margin: 0em;
  margin: 0.2em;
  font-size:  1.6em;
}

h4 {
  font-size:  18px;
}

.ddihead {
}

.ddiextl {
}

.ddiemph {
}

.ddihi {
}

.table_heading {
  border-style: solid;
  border-width: 1px;
  font-weight: bold;
  background-color: #fdfdfd;
}

.cats {
  border-collapse: collapse;  
  margin: 1em;
  font-size: 0.8em;
}

th.cat_lbl {
  background-color: #657383;
  border-style: solid;
  border-width: 1px;
    border-color:   #657383;
  padding: 3px;
  font-size: 1.2em;
  font-weight: bold;
}

th.cat_val {
  background-color: #657383;
  border-color:   #657383;
  border-style: solid;
  border-width: 1px;
  padding: 3px;
  font-size: 1.2em;
  font-weight: bold;
}

td.cat_lbl {
    border-color:   #657383;
  border-style: solid;
  border-width: 1px;
  padding: 3px;
  font-size: 1.2em;
}

td.cat_val {
  border-style: solid;
    border-color:   #657383;
  border-width: 1px;
  padding: 3px;
  font-size: 1.2em;
}

.major_section {
  border-style: solid;
  border-width: 1px;
  border-color:   #657383;
  border-radius: 1em;
  margin: 1em;
  padding: 0em;
}

.group {
  margin: 1em;
}

.data {
  border-collapse: collapse;  
  margin: 1em;
}

.data .label {
  font-size: 1.2em;
  border-style: solid;
  border-width: 1px;
  margin: 1em;
  padding: 3px;
}

.data .value {
  font-size: 1.2em;
  border-style: solid;
    border-color:   #657383;
  border-width: 1px;
  margin: 1em;
  padding: 3px;
  color: #000;
}

.mpc_logo {
  padding: 3px;
  margin: 0.5em;
  background-color: #B31B1B;
  border-bottom: solid;
}

.mpc_logo em {
  font-family: Copperplate, "Copperplate Gothic Bold", 
    "Copperplate Gothic Light", "Arial Black", Helvetica, sans-serif;
  font-weight: bold;
  font-style: normal;
  font-size: 3em;
  color: #002779;
  background-color: #EEE1B4;
  border: solid;
  border-width: thin;
  margin-right: 0.1em;
}

.mpc_logo .name {
  font-family: Candara, Verdana, Helvetica, sans-serif;
  font-size: 2em;
  color: #ffffff;
}


          </xsl:text>
        </style>
      </head>
      <body>
        <div class="mpc_logo">
          <span class="name">NCRN Cornell Node - CED2AR Project</span>
        </div>
        <ul><span class="nav_label">Relevant Codebooks:</span><xsl:apply-templates select="codeBook/docDscr/citation/titlStmt"></xsl:apply-templates>       
        </ul>
        <xsl:apply-templates select="xyzzy:codeBook | codeBook"></xsl:apply-templates>
      </body>
    </html>
  </xsl:template>
  <xsl:template match="codeBook/docDscr/citation/titlStmt">
    <li><a ><xsl:attribute name="href"><xsl:value-of select="concat('#', normalize-space(titl))"/></xsl:attribute><xsl:value-of select="normalize-space(titl)"/></a></li>
  </xsl:template>
  <xsl:template match="xyzzy:codeBook | codeBook">
    <div class="nav_section">
      <xsl:attribute name="id"><xsl:value-of select="normalize-space(docDscr/citation/titlStmt/titl)"/></xsl:attribute>
      <h2><xsl:value-of select="normalize-space(docDscr/citation/titlStmt/titl)"/></h2>
          <span class="nav_label">Jump to Section</span>
          <ol class="nav_list">
            <xsl:if test="xyzzy:docDscr | docDscr">
              <li>
                <a><xsl:attribute name="href"><xsl:value-of select="concat('#docDscr', normalize-space(docDscr/citation/titlStmt/titl))"/></xsl:attribute>Document Description</a>
              </li>
            </xsl:if>
            <xsl:if test="xyzzy:stdyDscr | stdyDscr">
              <li>
                <a><xsl:attribute name="href"><xsl:value-of select="concat('#stdyDscr', normalize-space(docDscr/citation/titlStmt/titl))"/></xsl:attribute>Study Description</a>
              </li>
            </xsl:if>
            <xsl:if test="xyzzy:fileDscr | fileDscr">
              <li>
                <a><xsl:attribute name="href"><xsl:value-of select="concat('#fileDscr', normalize-space(docDscr/citation/titlStmt/titl))"/></xsl:attribute>File Description</a>
              </li>
            </xsl:if>
            <xsl:if test="xyzzy:dataDscr | dataDscr">
              <li>
                <a><xsl:attribute name="href"><xsl:value-of select="concat('#dataDscr', normalize-space(docDscr/citation/titlStmt/titl))"/></xsl:attribute>Variable Description</a>
              </li>
            </xsl:if>
          </ol>
        </div>
        <xsl:apply-templates select="xyzzy:docDscr | docDscr"/>
        <xsl:apply-templates select="xyzzy:stdyDscr | stdyDscr"/>
        <xsl:apply-templates select="xyzzy:fileDscr | fileDscr"/>
        <xsl:apply-templates select="xyzzy:dataDscr | dataDscr"/>
  </xsl:template>
  <!-- Begin docDscr templates -->
  <xsl:template match="xyzzy:docDscr | docDscr">
    <div class="major_section">
      <xsl:attribute name="id"><xsl:value-of select="concat('docDscr', normalize-space(citation/titlStmt/titl))"/></xsl:attribute>
      <h2>
        <xsl:text>&#167; 1. Document Description</xsl:text>
      </h2>
      <xsl:apply-templates select="xyzzy:citation | citation"/>
    </div>
  </xsl:template>
  <xsl:template match="xyzzy:citation | citation">
    <div class="group">
      <h3>
        <xsl:text>Citation</xsl:text>
      </h3>
      <table class="data">
        <xsl:apply-templates select="xyzzy:titlStmt | titlStmt"/>
        <xsl:apply-templates select="xyzzy:rspStmt | rspStmt"/>
        <xsl:apply-templates select="xyzzy:prodStmt | prodStmt"/>
        <xsl:apply-templates select="xyzzy:distStmt | distStmt"/>
        <xsl:apply-templates select="xyzzy:verStmt | verStmt"/>
      </table>
    </div>
  </xsl:template>
  <xsl:template match="xyzzy:titlStmt | titlStmt">
    <tr>
      <td class="table_heading" colspan="2">
        <xsl:text>Title Statement</xsl:text>
      </td>
    </tr>
    <xsl:apply-templates select="xyzzy:titl | titl"/>
    <xsl:apply-templates select="xyzzy:subTitl | subTitl"/>
    <xsl:apply-templates select="xyzzy:IDNo | IDNo"/>
  </xsl:template>
  <xsl:template match="xyzzy:prodStmt | prodStmt">
    <tr>
      <td class="table_heading" colspan="2">
        <xsl:text>Production Statement</xsl:text>
      </td>
    </tr>
    <xsl:apply-templates select="xyzzy:producer | producer"/>
    <xsl:apply-templates select="xyzzy:prodDate | prodDate"/>
    <xsl:apply-templates select="xyzzy:prodPlac | prodPlac"/>
  </xsl:template>
  <xsl:template match="xyzzy:rspStmt | rspStmt">
    <tr>
      <td class="table_heading" colspan="2">
        <xsl:text>Responsibility Statement</xsl:text>
      </td>
    </tr>
    <xsl:apply-templates select="xyzzy:AuthEnty | AuthEnty"/>
  </xsl:template>
  <xsl:template match="xyzzy:distStmt | distStmt">
    <tr>
      <td class="table_heading" colspan="2">
        <xsl:text>Distribution Statement</xsl:text>
      </td>
    </tr>
    <xsl:apply-templates select="xyzzy:contact | contact"/>
  </xsl:template>
  <xsl:template match="xyzzy:AuthEnty | AuthEnty">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Authoring Entity:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
    <xsl:if test="@affiliation">
      <tr>
        <td class="label">
          <xsl:text>Affiliation:</xsl:text>
        </td>
        <td class="value">
          <xsl:value-of select="@affiliation"/>
        </td>
      </tr>
    </xsl:if>
  </xsl:template>
  <xsl:template match="xyzzy:producer | producer">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Producer:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
    <xsl:if test="@abbreviation">
      <tr>
        <td class="label">
          <xsl:text>Abbreviation:</xsl:text>
        </td>
        <td class="value">
          <xsl:value-of select="@abbreviation"/>
        </td>
      </tr>
    </xsl:if>
    <xsl:if test="@affiliation">
      <tr>
        <td class="label">
          <xsl:text>Affiliation:</xsl:text>
        </td>
        <td class="value">
          <xsl:value-of select="@affiliation"/>
        </td>
      </tr>
    </xsl:if>
    <xsl:if test="@role">
      <tr>
        <td class="label">
          <xsl:text>Role:</xsl:text>
        </td>
        <td class="value">
          <xsl:value-of select="@role"/>
        </td>
      </tr>
    </xsl:if>
  </xsl:template>
  <xsl:template match="xyzzy:contact | contact">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Contact Persons:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
    <xsl:if test="@affiliation">
      <tr>
        <td class="label">
          <xsl:text>Affiliation:</xsl:text>
        </td>
        <td class="value">
          <xsl:value-of select="@affiliation"/>
        </td>
      </tr>
    </xsl:if>
    <xsl:if test="@URI">
      <tr>
        <td class="label">
          <xsl:text>URI:</xsl:text>
        </td>
        <td class="value">
          <a href="{@URI}">
            <xsl:value-of select="@URI"/>
          </a>
        </td>
      </tr>
    </xsl:if>
  </xsl:template>
  <xsl:template match="xyzzy:titl | titl">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Title:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:subTitl | subTitl">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Subtitle:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:IDNo | IDNo">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Identification Number:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:prodDate | prodDate">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Date of Production:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:prodPlac | prodPlac">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Place of Production:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <!-- End docDscr templates -->
  <!-- Begin stdyDscr templates -->
  <xsl:template match="xyzzy:stdyDscr | stdyDscr">
    <div class="major_section">
      <xsl:attribute name="id"><xsl:value-of select="concat('stdyDscr', normalize-space(../docDscr/citation/titlStmt/titl))"/></xsl:attribute>
      <h2>
        <xsl:text>&#167; 2. Study Description</xsl:text>
      </h2>
      <xsl:apply-templates select="xyzzy:citation | citation"/>
      <xsl:apply-templates select="xyzzy:stdyInfo | stdyInfo"/>
      <xsl:apply-templates select="xyzzy:dataAccs | dataAccs"/>
      <xsl:if test="xyzzy:notes | notes">
        <div class="group">
          <h3>
            <xsl:text>Study Notes</xsl:text>
          </h3>
          <table class="data">
            <xsl:apply-templates select="xyzzy:notes | notes" mode="row"/>
          </table>
        </div>
      </xsl:if>
    </div>
  </xsl:template>
  <xsl:template match="xyzzy:stdyInfo | stdyInfo">
    <div class="group">
      <h3>
        <xsl:text>Study Scope</xsl:text>
      </h3>
      <table class="data">
        <xsl:apply-templates select="xyzzy:subject | subject"/>
        <xsl:apply-templates select="xyzzy:sumDscr | sumDscr"/>
        <xsl:apply-templates select="xyzzy:notes | notes" mode="row"/>
      </table>
    </div>
  </xsl:template>
  <xsl:template match="xyzzy:dataAccs | dataAccs">
    <div class="group">
      <h3>
        <xsl:text>Data Access - Use Statement</xsl:text>
      </h3>
      <table class="data">
        <xsl:apply-templates select="xyzzy:useStmt | useStmt"/>
      </table>
    </div>
  </xsl:template>
  <xsl:template match="xyzzy:subject | subject">
    <tr>
      <td class="table_heading" colspan="2">
        <xsl:text>Subject Information</xsl:text>
      </td>
    </tr>
    <xsl:apply-templates select="xyzzy:keyword | keyword"/>
    <xsl:apply-templates select="xyzzy:topcClas | topcClas"/>
  </xsl:template>
  <xsl:template match="xyzzy:sumDscr | sumDscr">
    <tr>
      <td class="table_heading" colspan="2">
        <xsl:text>Summary Data Description</xsl:text>
      </td>
    </tr>
    <xsl:apply-templates select="xyzzy:timePrd | timePrd"/>
    <xsl:apply-templates select="xyzzy:nation | nation"/>
  </xsl:template>
  <xsl:template match="xyzzy:verStmt | verStmt">
    <tr>
      <td class="table_heading" colspan="2">
        <xsl:text>Version Statement</xsl:text>
      </td>
    </tr>
    <xsl:apply-templates select="xyzzy:version | version"/>
  </xsl:template>
  <xsl:template match="xyzzy:useStmt | useStmt">
    <xsl:apply-templates select="xyzzy:confDec | confDec"/>
    <xsl:apply-templates select="xyzzy:contact | contact"/>
    <xsl:apply-templates select="xyzzy:citReq | citReq"/>
    <xsl:apply-templates select="xyzzy:conditions | conditions"/>
    <xsl:apply-templates select="xyzzy:disclaimer | disclaimer"/>
  </xsl:template>
  <xsl:template match="xyzzy:version | version">
    <xsl:if test="@date">
      <tr>
        <td class="label">
          <xsl:text>Date:</xsl:text>
        </td>
        <td class="value">
          <xsl:value-of select="@date"/>
        </td>
      </tr>
    </xsl:if>
  </xsl:template>
  <xsl:template match="xyzzy:confDec | confDec">
    <tr>
      <td class="table_heading" colspan="2">
        <xsl:text>Confidentiality Declaration</xsl:text>
      </td>
    </tr>
    <tr>
      <td class="value" colspan="2">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:citReq | citReq">
    <tr>
      <td class="table_heading" colspan="2">
        <xsl:text>Citation Requirement</xsl:text>
      </td>
    </tr>
    <tr>
      <td class="value" colspan="2">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:conditions | conditions">
    <tr>
      <td class="table_heading" colspan="2">
        <xsl:text>Conditions</xsl:text>
      </td>
    </tr>
    <tr>
      <td class="value" colspan="2">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:disclaimer | disclaimer">
    <tr>
      <td class="table_heading" colspan="2">
        <xsl:text>Disclaimer</xsl:text>
      </td>
    </tr>
    <tr>
      <td class="value" colspan="2">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:keyword | keyword">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Keywords:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:topcClas | topcClas">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Topic Classification:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:nation | nation">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Country:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:timePrd | timePrd">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Time Period:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <!-- end stdyDscr templates -->
  <!-- begin fileDscr templates -->
  <xsl:template match="xyzzy:fileDscr | fileDscr">
    <div class="major_section">
      <xsl:attribute name="id"><xsl:value-of select="concat('fileDscr', normalize-space(../docDscr/citation/titlStmt/titl))"/></xsl:attribute>
      <h2>
        <xsl:text>&#167; 3. File Description</xsl:text>
      </h2>
      <xsl:apply-templates select="xyzzy:fileTxt | fileTxt"/>
    </div>
  </xsl:template>
  <xsl:template match="xyzzy:fileTxt | fileTxt">
    <div class="group">
      <h3>
        <xsl:text>File</xsl:text>
      </h3>
      <table class="data">
        <xsl:apply-templates select="xyzzy:fileName | fileName"/>
        <xsl:apply-templates select="xyzzy:fileCont | fileCont"/>
        <xsl:apply-templates select="xyzzy:fileStrc | fileStrc"/>
        <xsl:apply-templates select="xyzzy:fileType | fileType"/>
        <xsl:apply-templates select="xyzzy:format | format"/>
        <xsl:apply-templates select="xyzzy:filePlac | filePlac"/>
      </table>
    </div>
  </xsl:template>
  <xsl:template match="xyzzy:fileName | fileName">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>File Name:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:fileCont | fileCont">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Contents of Files:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:fileStrc | fileStrc">
    <xsl:if test="@type">
      <tr>
        <td class="label">
          <xsl:text>Type:</xsl:text>
        </td>
        <td class="value">
          <xsl:value-of select="@type"/>
        </td>
      </tr>
    </xsl:if>
  </xsl:template>
  <xsl:template match="xyzzy:fileType | fileType">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>File Type:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:format | format">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Data Format:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:filePlac | filePlac">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Place of File Production:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <!-- end fileDscr templates -->
  <!-- begin dataDscr templates -->
  <xsl:template match="xyzzy:dataDscr | dataDscr">
    <div class="major_section">
      <xsl:attribute name="id"><xsl:value-of select="concat('dataDscr', normalize-space(../docDscr/citation/titlStmt/titl))"/></xsl:attribute>
      <h2>
        <xsl:text>&#167; 4. Variable Description</xsl:text>
      </h2>
      <div class="nav_section">
        <span class="nav_label">Jump to Variable</span>
        <ol class="nav_list">
          <xsl:apply-templates select="xyzzy:var | var" mode="nav"/>
        </ol>
      </div>
      <xsl:apply-templates select="xyzzy:var | var" mode="detail"/>
    </div>
  </xsl:template>
  <xsl:template match="xyzzy:var | var" mode="nav">
    <li>
      <a href="#{@name}">
        <xsl:value-of select="@name"/>
      </a>
      <xsl:text> (</xsl:text>
      <xsl:value-of select="xyzzy:labl | labl"/>
      <xsl:text>)</xsl:text>
    </li>
  </xsl:template>
  <xsl:template match="xyzzy:var | var" mode="detail">
    <div class="group" id="{@name}">
      <h3>
        <xsl:text>Variable: "</xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>"</xsl:text>
      </h3>
      <table class="data">
        <xsl:if test="@name">
          <tr>
            <td class="label">
              <xsl:text>Name:</xsl:text>
            </td>
            <td class="value">
              <xsl:value-of select="@name"/>
            </td>
          </tr>
          <tr>
            <td class="label">
              <xsl:text>Source:</xsl:text>
            </td>
            <td class="value">
              <xsl:value-of select="../../xyzzy:docDscr/xyzzy:citation/xyzzy:titlStmt/xyzzy:titl | ../../docDscr/citation/titlStmt/titl"/>
            </td>
          </tr>
        </xsl:if>
        <xsl:apply-templates select="xyzzy:labl | labl"/>
        <xsl:apply-templates select="xyzzy:txt | txt"/>
        <xsl:apply-templates select="xyzzy:universe | universe"/>
        <xsl:apply-templates select="xyzzy:concept | concept"/>
        <xsl:apply-templates select="xyzzy:location | location"/>
        <xsl:if test="@rectype">
          <tr>
            <td class="label">
              <xsl:text>Record Type:</xsl:text>
            </td>
            <td class="value">
              <xsl:value-of select="@rectype"/>
            </td>
          </tr>
        </xsl:if>
        <xsl:if test="@intvl">
          <tr>
            <td class="label">
              <xsl:text>Interval:</xsl:text>
            </td>
            <td class="value">
              <xsl:value-of select="@intvl"/>
            </td>
          </tr>
        </xsl:if>
        <xsl:apply-templates select="xyzzy:varFormat | varFormat"/>
        <xsl:if test="@dcml">
          <tr>
            <td class="label">
              <xsl:text>Implied Decimal Places:</xsl:text>
            </td>
            <td class="value">
              <xsl:value-of select="@dcml"/>
            </td>
          </tr>
        </xsl:if>
        <xsl:apply-templates select="xyzzy:codInstr | codInstr"/>
        <xsl:apply-templates select="xyzzy:qstn | qstn"/>
        <xsl:if test="xyzzy:catgry | catgry">
          <tr>
            <td class="table_heading" colspan="2">
              <xsl:text>Categories</xsl:text>
            </td>
          </tr>
          <tr>
            <td colspan="2" class="value">
              <table class="cats">
                <tr>
                  <th class="cat_val">
                    <xsl:text>Value</xsl:text>
                  </th>
                  <th class="cat_lbl">
                    <xsl:text>Label</xsl:text>
                  </th>
                </tr>
                <xsl:apply-templates select="xyzzy:catgry | catgry"/>
              </table>
            </td>
          </tr>
        </xsl:if>
        <xsl:apply-templates select="xyzzy:notes | notes" mode="row"/>
      </table>
    </div>
  </xsl:template>
  <xsl:template match="xyzzy:catgry | catgry">
    <tr>
      <td class="cat_val">
        <xsl:value-of select="xyzzy:catValu | catValu"/>
      </td>
      <td class="cat_lbl">
        <xsl:choose>
          <xsl:when test="xyzzy:txt | txt">
            <xsl:value-of select="xyzzy:txt | txt"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="xyzzy:labl | labl"/>
          </xsl:otherwise>
        </xsl:choose>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:qstn | qstn">
    <xsl:apply-templates select="xyzzy:qstnLit | qstnLit"/>
    <xsl:apply-templates select="xyzzy:ivuInstr | ivuInstr"/>
  </xsl:template>
  <xsl:template match="xyzzy:ivuInstr | ivuInstr">
    <tr>
      <td class="table_heading" colspan="2">
        <xsl:text>Interviewer Instructions</xsl:text>
      </td>
    </tr>
    <tr>
      <td class="value" colspan="2">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:qstnLit | qstnLit">
    <tr>
      <td class="table_heading" colspan="2">
        <xsl:text>Literal Question</xsl:text>
      </td>
    </tr>
    <tr>
      <td class="value" colspan="2">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:location | location">
    <xsl:if test="@StartPos">
      <tr>
        <td class="label">
          <xsl:text>Start Position:</xsl:text>
        </td>
        <td class="value">
          <xsl:value-of select="@StartPos"/>
        </td>
      </tr>
    </xsl:if>
    <xsl:if test="@EndPos">
      <tr>
        <td class="label">
          <xsl:text>End Position:</xsl:text>
        </td>
        <td class="value">
          <xsl:value-of select="@EndPos"/>
        </td>
      </tr>
    </xsl:if>
    <xsl:if test="@width">
      <tr>
        <td class="label">
          <xsl:text>Width:</xsl:text>
        </td>
        <td class="value">
          <xsl:value-of select="@width"/>
        </td>
      </tr>
    </xsl:if>
  </xsl:template>
  <xsl:template match="xyzzy:universe | universe">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Universe:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:txt | txt">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Variable Text:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:labl | labl">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Label:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:codInstr | codInstr">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Coder Instructions:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:concept | concept">
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Concept:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:varFormat | varFormat">
    <xsl:if test="@type">
      <tr>
        <td class="label">
          <xsl:text>Variable Format:</xsl:text>
        </td>
        <td class="value">
          <xsl:value-of select="@type"/>
        </td>
      </tr>
    </xsl:if>
  </xsl:template>
  <!-- end dataDscr templates -->
  <xsl:template match="xyzzy:notes | notes" mode="row">
    <xsl:if test="position()=1">
      <tr>
        <td class="table_heading" colspan="2">
          <xsl:text>Notes</xsl:text>
        </td>
      </tr>
    </xsl:if>
    <tr>
      <td class="label">
        <xsl:if test="position()=1">
          <xsl:text>Note:</xsl:text>
        </xsl:if>
      </td>
      <td class="value">
        <xsl:apply-templates/>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="xyzzy:ExtLink | ExtLink">
    <a class="ddiextl" href="{@URI}">
      <xsl:apply-templates/>
    </a>
  </xsl:template>
  <xsl:template match="xyzzy:head | head">
    <span class="ddihead">
      <xsl:apply-templates/>
    </span>
  </xsl:template>
  <xsl:template match="xyzzy:emph | emph">
    <span class="ddiemph">
      <xsl:apply-templates/>
    </span>
  </xsl:template>
  <xsl:template match="xyzzy:hi | hi">
    <span class="ddihi">
      <xsl:apply-templates/>
    </span>
  </xsl:template>
  <xsl:template match="xyzzy:item | item">
    <li>
      <xsl:apply-templates/>
    </li>
  </xsl:template>
  <xsl:template match="xyzzy:list | list">
    <xsl:if test="@type = &quot;ordered&quot;">
      <ol>
        <xsl:apply-templates/>
      </ol>
    </xsl:if>
    <xsl:if test="@type = &quot;bulleted&quot;">
      <ul>
        <xsl:apply-templates/>
      </ul>
    </xsl:if>
  </xsl:template>
  <xsl:template name="breakItUp" match="text()">
    <xsl:param name="text" select="."/>
    <xsl:choose>
      <xsl:when test="not(contains($text, '&#xA;'))">
        <xsl:copy-of select="$text"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="substring-before($text, '&#xA;')"/>
        <br/>
        <xsl:call-template name="breakItUp">
          <xsl:with-param name="text" select="substring-after($text, '&#xA;')"/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
</xsl:stylesheet>
